     1                                      global  _start
     2                                  
     3                                      section .text
     4                                  _start:
     5                                      ; sum first 10 in [1,3,5,7,9...]
     6                                      ; init
     7 00000000 6A01                        push 1
     8                                      ; inc
     9 00000002 6A02                        push 2
    10                                      ; count
    11 00000004 6A0A                        push 10
    12                                      ; calculate sum
    13 00000006 E811000000                  call sum
    14                                      ; cleanup stack, mov result to rdx
    15 0000000B 4883C418                    add  rsp, 24
    16 0000000F 4889C2                      mov  rdx, rax
    17                                  
    18                                      ; sys_exit, returning sum
    19 00000012 B83C000000                  mov  rax, 60
    20 00000017 4889D7                      mov  rdi, rdx
    21 0000001A 0F05                        syscall
    22                                  sum:
    23                                      ; setup
    24 0000001C 55                          push rbp
    25 0000001D 4889E5                      mov  rbp, rsp
    26 00000020 53                          push rbx
    27 00000021 51                          push rcx
    28 00000022 52                          push rdx
    29                                  
    30 00000023 B800000000                  mov  rax, 0
    31                                      ; rbx is holding the init
    32 00000028 488B5D20                    mov  rbx, [rbp + 32]
    33                                      ; rdx is holding the inc
    34 0000002C 488B5518                    mov  rdx, [rbp + 24]
    35                                      ; rcx is holding the count
    36 00000030 488B4D10                    mov  rcx, [rbp + 16]
    37                                      ; if count is zero, jmp to end 
    38 00000034 E315                        jrcxz end
    39                                  loop:    
    40                                      ; add rbx to sum
    41 00000036 EB0E                        jmp  add
    42                                      ; add rdx to rbx, dec rcx
    43 00000038 4801D3                      add  rbx, rdx 
    44 0000003B 48FFC9                      dec  rcx
    45                                  
    46                                      ; if rcx > 0, loop, else end
    47 0000003E 4883F900                    cmp  rcx, 0
    48 00000042 7FF2                        jg   loop
    49 00000044 EB05                        jmp  end
    50                                      ; jrcxz end
    51                                      ; jmp loop
    52                                  add:
    53 00000046 4801D8                      add  rax, rbx
    54 00000049 EBED                        jmp  loop + 2
    55                                  end:
    56                                      ; cleanup
    57 0000004B 5A                          pop  rdx
    58 0000004C 59                          pop  rcx
    59 0000004D 5B                          pop  rbx
    60 0000004E 5D                          pop  rbp
    61 0000004F C3                          ret
    62                                  
