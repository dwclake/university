     1                                      global  _start
     2                                  
     3                                      section .data
     4 00000000 303132333435363738-     str1:  db   "0123456789", 0
     4 00000009 3900               
     5 0000000B 303132333435363738-     str2:  db   "0123456789", 0
     5 00000014 3900               
     6 00000016 303134333435363738-     str3:  db   "0143456789", 0
     6 0000001F 3900               
     7 00000021 343500                  str4:  db   "45", 0
     8                                  
     9                                      section .text
    10                                  _start:
    11                                      ; move address of str1 to rsi
    12 00000000 488D3425[00000000]          lea  rsi, str1
    13                                      ; rbx is holding the init
    14 00000008 488D3C25[16000000]          lea  rdi, str3
    15                                      ; 
    16 00000010 68[00000000]                push str1
    17                                      ; compare strings
    18 00000015 E811000000                  call compare
    19                                  
    20 0000001A 4883C408                    add rsp, 8
    21                                  
    22 0000001E 4889DA                      mov rdx, rbx
    23                                      
    24                                      ; mov result to rdx
    25                                      ;mov  rdx, rax
    26                                  
    27                                      ;lea  rsi, str1
    28                                      ;lea  rdi, str4
    29                                  
    30                                      ;call scan
    31                                  
    32                                      ;mov rdx, rbx
    33                                  
    34                                      ; sys_exit, returning sum
    35 00000021 B83C000000                  mov  rax, 60
    36 00000026 4889D7                      mov  rdi, rdx
    37 00000029 0F05                        syscall
    38                                  
    39                                  compare:
    40                                      ; setup
    41 0000002B 55                          push rbp
    42 0000002C 4889E5                      mov  rbp, rsp
    43 0000002F 51                          push rcx
    44                                      
    45                                      ; assume equal
    46 00000030 B801000000                  mov  rax, 1
    47 00000035 488B4D10                    mov  rcx, [rbp + 16]
    48 00000039 FC                          cld
    49                                  
    50                                  loop_compare:    
    51                                      ; check for null terminator in first operand
    52 0000003A 67803E00                    cmp  byte [esi], 0 
    53 0000003E 7416                        je   end_compare
    54                                  
    55                                      ; check for null terminator in second operand
    56 00000040 67803F00                    cmp  byte [edi], 0
    57 00000044 7410                        je   end_compare
    58                                  
    59                                      ; compare characters, if not eq jump, otherwise loop
    60 00000046 A6                          cmpsb
    61 00000047 7502                        jne  noteq
    62 00000049 EBEF                        jmp  loop_compare
    63                                  
    64                                  noteq:
    65 0000004B 4889F3                      mov  rbx, rsi
    66 0000004E 4829CB                      sub  rbx, rcx
    67 00000051 B800000000                  mov  rax, 0
    68                                  
    69                                  end_compare:
    70                                      ; cleanup
    71 00000056 59                          pop  rcx
    72 00000057 5D                          pop  rbp
    73 00000058 C3                          ret
    74                                  
    75                                  scan:
    76                                      ; setup
    77 00000059 55                          push rbp
    78 0000005A 4889E5                      mov  rbp, rsp
    79 0000005D 51                          push rcx
    80                                  
    81 0000005E 803E00                      cmp  byte [rsi], 0
    82 00000061 741B                        je end_scan
    83                                      
    84 00000063 FC                          cld
    85 00000064 BB00000000                  mov  rbx, 0
    86                                  
    87                                  loop_scan:
    88 00000069 668B07                      mov ax, word [rdi]
    89                                  
    90 0000006C 4883C301                    add  rbx, 1
    91 00000070 66AF                        scasw
    92 00000072 740A                        je found
    93                                  
    94 00000074 48FFCE                      dec  rsi
    95                                  
    96 00000077 803E00                      cmp  byte [rsi], 0
    97 0000007A 7402                        je  end_scan
    98 0000007C EBEB                        jmp  loop_scan
    99                                  found:
   100                                  
   101                                  end_scan:
   102                                      ; cleanup
   103 0000007E 59                          pop  rcx
   104 0000007F 5D                          pop  rbp
   105 00000080 C3                          ret
